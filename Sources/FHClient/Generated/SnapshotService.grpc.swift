//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: SnapshotService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate SnapshotServiceServiceClient, then call methods of this protocol to make API calls.
public protocol SnapshotServiceService {
  func getSnapshots(_ request: SnapshotQuery, callOptions: CallOptions?) -> UnaryCall<SnapshotQuery, SnapshotResponse>
}

public final class SnapshotServiceServiceClient: GRPCClient, SnapshotServiceService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the SnapshotService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to GetSnapshots.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSnapshots.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSnapshots(_ request: SnapshotQuery, callOptions: CallOptions? = nil) -> UnaryCall<SnapshotQuery, SnapshotResponse> {
    return self.makeUnaryCall(path: "/SnapshotService/GetSnapshots",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

