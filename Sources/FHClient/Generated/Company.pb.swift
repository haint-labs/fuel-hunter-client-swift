// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models/Company.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Fuel_Hunter_Company {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var order: Int32 = 0

  public var hidden: Bool = false

  public var description_p: Fuel_Hunter_Company.Description {
    get {return _description_p ?? Fuel_Hunter_Company.Description()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {self._description_p = nil}

  public var homepage: String = String()

  public var logo: Fuel_Hunter_Company.Logo {
    get {return _logo ?? Fuel_Hunter_Company.Logo()}
    set {_logo = newValue}
  }
  /// Returns true if `logo` has been explicitly set.
  public var hasLogo: Bool {return self._logo != nil}
  /// Clears the value of `logo`. Subsequent reads from it will return its default value.
  public mutating func clearLogo() {self._logo = nil}

  public var largeLogo: Fuel_Hunter_Company.Logo {
    get {return _largeLogo ?? Fuel_Hunter_Company.Logo()}
    set {_largeLogo = newValue}
  }
  /// Returns true if `largeLogo` has been explicitly set.
  public var hasLargeLogo: Bool {return self._largeLogo != nil}
  /// Clears the value of `largeLogo`. Subsequent reads from it will return its default value.
  public mutating func clearLargeLogo() {self._largeLogo = nil}

  public var mapLogo: Fuel_Hunter_Company.Logo {
    get {return _mapLogo ?? Fuel_Hunter_Company.Logo()}
    set {_mapLogo = newValue}
  }
  /// Returns true if `mapLogo` has been explicitly set.
  public var hasMapLogo: Bool {return self._mapLogo != nil}
  /// Clears the value of `mapLogo`. Subsequent reads from it will return its default value.
  public mutating func clearMapLogo() {self._mapLogo = nil}

  public var mapGreyLogo: Fuel_Hunter_Company.Logo {
    get {return _mapGreyLogo ?? Fuel_Hunter_Company.Logo()}
    set {_mapGreyLogo = newValue}
  }
  /// Returns true if `mapGreyLogo` has been explicitly set.
  public var hasMapGreyLogo: Bool {return self._mapGreyLogo != nil}
  /// Clears the value of `mapGreyLogo`. Subsequent reads from it will return its default value.
  public mutating func clearMapGreyLogo() {self._mapGreyLogo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Logo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var x2: String = String()

    public var x3: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Description {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var en: String = String()

    public var lv: String = String()

    public var ru: String = String()

    public var lg: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Query {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var companies: [Fuel_Hunter_Company] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct UpdateRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var companies: [Fuel_Hunter_Company] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _description_p: Fuel_Hunter_Company.Description? = nil
  fileprivate var _logo: Fuel_Hunter_Company.Logo? = nil
  fileprivate var _largeLogo: Fuel_Hunter_Company.Logo? = nil
  fileprivate var _mapLogo: Fuel_Hunter_Company.Logo? = nil
  fileprivate var _mapGreyLogo: Fuel_Hunter_Company.Logo? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "fuel.hunter"

extension Fuel_Hunter_Company: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Company"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "order"),
    3: .same(proto: "hidden"),
    4: .same(proto: "description"),
    5: .same(proto: "homepage"),
    6: .same(proto: "logo"),
    7: .standard(proto: "large_logo"),
    8: .standard(proto: "map_logo"),
    9: .standard(proto: "map_grey_logo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularInt32Field(value: &self.order)
      case 3: try decoder.decodeSingularBoolField(value: &self.hidden)
      case 4: try decoder.decodeSingularMessageField(value: &self._description_p)
      case 5: try decoder.decodeSingularStringField(value: &self.homepage)
      case 6: try decoder.decodeSingularMessageField(value: &self._logo)
      case 7: try decoder.decodeSingularMessageField(value: &self._largeLogo)
      case 8: try decoder.decodeSingularMessageField(value: &self._mapLogo)
      case 9: try decoder.decodeSingularMessageField(value: &self._mapGreyLogo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.order != 0 {
      try visitor.visitSingularInt32Field(value: self.order, fieldNumber: 2)
    }
    if self.hidden != false {
      try visitor.visitSingularBoolField(value: self.hidden, fieldNumber: 3)
    }
    if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.homepage.isEmpty {
      try visitor.visitSingularStringField(value: self.homepage, fieldNumber: 5)
    }
    if let v = self._logo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._largeLogo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._mapLogo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._mapGreyLogo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuel_Hunter_Company, rhs: Fuel_Hunter_Company) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.order != rhs.order {return false}
    if lhs.hidden != rhs.hidden {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.homepage != rhs.homepage {return false}
    if lhs._logo != rhs._logo {return false}
    if lhs._largeLogo != rhs._largeLogo {return false}
    if lhs._mapLogo != rhs._mapLogo {return false}
    if lhs._mapGreyLogo != rhs._mapGreyLogo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fuel_Hunter_Company.Logo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Fuel_Hunter_Company.protoMessageName + ".Logo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x2"),
    2: .same(proto: "x3"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.x2)
      case 2: try decoder.decodeSingularStringField(value: &self.x3)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.x2.isEmpty {
      try visitor.visitSingularStringField(value: self.x2, fieldNumber: 1)
    }
    if !self.x3.isEmpty {
      try visitor.visitSingularStringField(value: self.x3, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuel_Hunter_Company.Logo, rhs: Fuel_Hunter_Company.Logo) -> Bool {
    if lhs.x2 != rhs.x2 {return false}
    if lhs.x3 != rhs.x3 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fuel_Hunter_Company.Description: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Fuel_Hunter_Company.protoMessageName + ".Description"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "en"),
    2: .same(proto: "lv"),
    3: .same(proto: "ru"),
    4: .same(proto: "lg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.en)
      case 2: try decoder.decodeSingularStringField(value: &self.lv)
      case 3: try decoder.decodeSingularStringField(value: &self.ru)
      case 4: try decoder.decodeSingularStringField(value: &self.lg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.en.isEmpty {
      try visitor.visitSingularStringField(value: self.en, fieldNumber: 1)
    }
    if !self.lv.isEmpty {
      try visitor.visitSingularStringField(value: self.lv, fieldNumber: 2)
    }
    if !self.ru.isEmpty {
      try visitor.visitSingularStringField(value: self.ru, fieldNumber: 3)
    }
    if !self.lg.isEmpty {
      try visitor.visitSingularStringField(value: self.lg, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuel_Hunter_Company.Description, rhs: Fuel_Hunter_Company.Description) -> Bool {
    if lhs.en != rhs.en {return false}
    if lhs.lv != rhs.lv {return false}
    if lhs.ru != rhs.ru {return false}
    if lhs.lg != rhs.lg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fuel_Hunter_Company.Query: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Fuel_Hunter_Company.protoMessageName + ".Query"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuel_Hunter_Company.Query, rhs: Fuel_Hunter_Company.Query) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fuel_Hunter_Company.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Fuel_Hunter_Company.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "companies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.companies)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.companies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.companies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuel_Hunter_Company.Response, rhs: Fuel_Hunter_Company.Response) -> Bool {
    if lhs.companies != rhs.companies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fuel_Hunter_Company.UpdateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Fuel_Hunter_Company.protoMessageName + ".UpdateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "companies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.companies)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.companies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.companies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuel_Hunter_Company.UpdateRequest, rhs: Fuel_Hunter_Company.UpdateRequest) -> Bool {
    if lhs.companies != rhs.companies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
